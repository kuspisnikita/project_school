Что добавлено:

1. Перегрузка.
- Перегрузка оператора + в классе Group:
В классе Group перегрузка оператора + позволяет добавлять новые группы, создавая интуитивно понятный способ работы с группами.
Например, если есть объект Group, то можно использовать group1 + group2, чтобы добавить данные группы напрямую.
Если переданный аргумент не является экземпляром Group, метод возвращает NotImplemented, что позволяет Python знать, что такой оператора не существует для данного типа.

- Перегрузка оператора == в классе Student:
В классе Student перегрузка оператора == позволяет сравнивать студентов по их идентификатору.
Если есть два объекта Student, то можно использовать student1 == student2 для сравнения, что делает код более читаемым.
Если переданный аргумент не является экземпляром Student, возвращается NotImplemented.

2. Паттерны.
- Класс TableFactory реализует паттерн - "Фабрика". Применяется в файле school.py и table.py Для упрощения и гибкости кода.

Основные компоненты проекта:

1. SQLite База данных
- Используется для хранения информации о различных сущностях, таких как группы, расписания и студенты.
- Проект подключается к SQLite базе данных (school.db) и выполняет SQL-запросы для чтения и записи данных.

2. Структура файлов
- main.py: Главный файл, который запускает приложение и взаимодействует с функциями из других модулей.
- database.py: Содержит классы и функции для выполнения операций с базой данных, таких как открытие и закрытие соединения.
- table.py: Здесь определены классы для работы с таблицами (Group, Schedule, Student), которые включают методы для вставки, удаления и просмотра записей.
- school.py: Ответственный за управление логикой приложения, включая отображение меню и обработку пользовательского ввода.

Основные функции приложения:

- Просмотр таблиц (view):
- Позволяет пользователю видеть все записи в конкретной таблице, выводя заголовки и данные в удобном формате.

- Экспорт данных в текстовый файл (export_to_txt):
- Позволяет экспортировать записи из таблицы в .txt файл, удобно для отчётов или резервного копирования.

- Вставка данных (insert):
- Дает возможность добавлять новые записи в таблицы, проверяя при этом, что запись с указанным идентификатором ещё не существует.

- Удаление данных (delete):
- Позволяет пользователю удалять записи по идентификатору, уверяясь, что запись существует перед удалением.

- Проверка существования идентификатора (check_id_exists):
- Удостоверяется, что запись с данным идентификатором существует в таблице, что предотвращает дублирование данных.

Пользовательский интерфейс

- Меню:
- Меню представлено в текстовом формате, позволяя пользователю выбрать действия с помощью ввода номера.
- Постоянный цикл, позволяющий выполнять несколько операций, пока пользователь не решит выйти из программы.

--
P.S. Для корректного подключения к базе данных нужно будет изменить расположение в файле main.py.

P.P.S. Файл экспортируется и появляется после завершения программы.